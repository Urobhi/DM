# Limpiamos todo antes de empezar a trabajar
rm( list=ls() )
gc()
library( "data.table")
kcarpeta_datasets         <-  "C:/Users/Pato/Documents/GitHub/DM-EyF/datasets/"
kcarpeta_entregas         <-  "C:/Users/Pato/Documents/GitHub/DM-EyF/entregas/"
kcampos_separador               <-  "\t"
karchivo_entrada_7meses_zip     <-  "paquete_premium_201906_202001.txt.gz"
noviembre <- fread(paste0(kcarpeta_datasets,
karchivo_entrada_7meses_zip,
collapse = ""), header=TRUE, sep=kcampos_separador
)[foto_mes == 201911,]
variable <- "mcuentas_saldo"
punto_corte <- 0
noviembre[,bin:= ifelse(noviembre[, get(variable)]  <= punto_corte, "inf", "sup")]
head(noviembre[,c(variable, "bin", "clase_ternaria"), with=FALSE], 50)
ds_bin_target <- dcast(noviembre, bin ~ clase_ternaria,
length,
value.var = "clase_ternaria")
# Sacamos la variable bin
noviembre$bin <- NULL
ds_bin_target
ds_bin_target[, ganancia := 29250 * `BAJA+2` - 750 * (CONTINUA + `BAJA+1`)]
ds_bin_target
fganancia_corte <- function(pdatos,
pvariable,
ppunto_corte,
ptarget = "clase_ternaria")
{
indice <- pdatos[, get(pvariable)] <= ppunto_corte
intervalo_inferior <- sum(
ifelse(pdatos[indice, get(ptarget)] == "BAJA+2",
29250, -750))
intervalo_superior <- sum(
ifelse(pdatos[!indice, get(ptarget)] == "BAJA+2",
29250,-750))
return(c(intervalo_inferior, intervalo_superior))
}
fganancia_corte(noviembre, "mcuentas_saldo", 0)
fganancia_corte(noviembre, "mcuentas_saldo", 0)
fganancia_corte(noviembre, "mcuentas_saldo", 0)```
fganancia_corte(noviembre, "mcuentas_saldo", 0)
fganancia_corte(noviembre, "mcuentas_saldo", -1000)
fganancia_corte(noviembre, "mcuentas_saldo", -2000)
fganancia_corte(noviembre, "mcuentas_saldo", -3000)
fganancia_corte(noviembre, "mcuentas_saldo", -4000)
fganancia_corte(noviembre, "mcuentas_saldo", -5000)
fganancia_corte(noviembre, "mcuentas_saldo", -6000)
fganancia_corte(noviembre, "mcuentas_saldo", -7000)
fganancia_corte(noviembre, "mcuentas_saldo", -8000)
fganancia_corte(noviembre, "mcuentas_saldo", -9000)
fganancia_corte(noviembre, "mcuentas_saldo", -10000)
fganancia_corte(noviembre, "mcuentas_saldo", 0)
fganancia_corte(noviembre, "mcuentas_saldo", -1000)
fganancia_corte(noviembre, "mcuentas_saldo", -2000)
fganancia_corte(noviembre, "mcuentas_saldo", -3000)
fganancia_corte(noviembre, "mcuentas_saldo", -4000)
fganancia_corte(noviembre, "mcuentas_saldo", -5000)
fganancia_corte(noviembre, "mcuentas_saldo", -6000)
fganancia_corte(noviembre, "mcuentas_saldo", -7000)
fganancia_corte(noviembre, "mcuentas_saldo", -8000)
fganancia_corte(noviembre, "mcuentas_saldo", -9000)
fganancia_corte(noviembre, "mcuentas_saldo", -10000)
fganancia_corte(noviembre, "mcuentas_saldo", -20000)
fganancia_corte(noviembre, "mcuentas_saldo", -30000)
fganancia_corte(noviembre, "mcuentas_saldo", -40000)
fganancia_corte(noviembre, "mcuentas_saldo", -50000)
fganancia_corte(noviembre, "mcuentas_saldo", 0)
fganancia_corte(noviembre, "mcuentas_saldo", -10000)
fganancia_corte(noviembre, "mcuentas_saldo", -20000)
fganancia_corte(noviembre, "mcuentas_saldo", -30000)
fganancia_corte(noviembre, "mcuentas_saldo", -40000)
fganancia_corte(noviembre, "mcuentas_saldo", -50000)
fganancia_corte(noviembre, "mcuentas_saldo", -60000)
fganancia_corte(noviembre, "mcuentas_saldo", -70000)
fganancia_corte(noviembre, "mcuentas_saldo", -80000)
fganancia_corte(noviembre, "mcuentas_saldo", -90000)
fganancia_corte(noviembre, "mcuentas_saldo",  -100000)
fganancia_corte(noviembre, "mcuentas_saldo",  -50000)
fganancia_corte(noviembre, "mcuentas_saldo",  -20000)
fganancia_corte(noviembre, "mcuentas_saldo",  -10000)
fganancia_corte(noviembre, "mcuentas_saldo",  10000)
tiempos <- c()
for (i in 1:10)
{
punto <- runif(1,
min=min(noviembre[,mcuentas_saldo]),
max=max(noviembre[,mcuentas_saldo]))
t0   <-  Sys.time()
fganancia_corte(noviembre, "mcuentas_saldo",  punto)
t1   <-  Sys.time()
tiempos <- cbind(tiempos, as.numeric( t1 - t0, units = "secs"))
}
mean(tiempos)
cantidad_cortes <- length(unique(noviembre[,mcuentas_saldo]))
cantidad_cortes
cantidad_cortes*mean(tiempos)
fmejor_corte <-  function(pdatos, pvariable, ptarget = "clase_ternaria")
{
# Contamos la cantidad de BAJA+2 y la ganancia total, suma de mandar todos los estimulos
baja_2    <-  sum(pdatos[, get(ptarget)] == "BAJA+2" )
ganancia_total <-  29250*baja_2 - 750*(nrow(pdatos) - baja_2)
# Me quedo solamente con la variable a cortar y la clase
ds    <-  pdatos[,  c(pvariable, ptarget),  with=FALSE ]
# Ordeno los datos seg?n variable a cortar
ds <- ds[ order(get(pvariable)),]
# Calculo las ganancias acumuladas, o lo que es lo mismo, la ganancia
# del intervalo inferior ( usando un punto de corte <= )
ds[, inferior := cumsum(
ifelse( ds[, get(ptarget)] == "BAJA+2", 29250, -750 ))]
# Luego calculo la ganancia del otro intervalo como la diferencia entre la
# ganancia total menos la ganancia del intervalo inferior
ds[, superior := ganancia_total - inferior]
# Buscamos cual es la m?xima ganancia posible para ese registro
ds[, max_gan := ifelse(inferior >= superior, inferior, superior)]
#Devolvemos el registro con la maxima ganancia
ds[max_gan == max(max_gan), c(pvariable, "inferior", "superior"), with=FALSE]
}
fmejor_corte(noviembre, "mcuentas_saldo")
fmejor_corte(noviembre, "Visa_mfinanciacion_limite")
library(rpart)
modelo   <-  rpart( clase_ternaria ~ .,   data = noviembre,  xval=0 )
modelo
library( "rpart.plot" )
install.packages('rpart.plot')
library( "rpart.plot" )
prp( modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0 )
ftabla_reglas <- function (pmodelo, pdatos, ptarget = "clase_ternaria") {
# Tomamos la columna con el target
target_vector <- pdatos[, get(ptarget)]
# Tomamos las clases de nuestro target
classes <- unique(target_vector)
# Tomamos las posicion de las reglas que aplican a los registro de nuestro ds,
# y obtenemos las reglas
row_leaf <- unique(pmodelo$where)
row_name_leaf <- as.integer(rownames(pmodelo$frame[row_leaf,]))
rules <- path.rpart(pmodelo, row_name_leaf, pretty = 0, print.it=FALSE)
rules_concat <- lapply(rules,
function(y) paste0(tail(y, n=-1), collapse = " & "))
leaves <- data.table(row_frame = row_leaf,
rules = rules_concat)
setkey(leaves,row_frame)
# Relacion target ~ hojas
leaves_target <- dcast(
data.table(
target=target_vector,
leaf = pmodelo$where),
leaf ~ target, length,
value.var = "target")
setkey(leaves_target, leaf)
# Juntamos todo
leaves_target <- leaves_target[leaves,nomatch=0]
# Sumamos algunas columnas calculadas
colnames(leaves_target[,classes,with=FALSE])[apply(leaves_target[,classes,with=FALSE],1,which.max)]
# Clase mayoritaria
leaves_target[,
y:=colnames(
leaves_target[,classes,with=FALSE]
)[
apply(leaves_target[,classes,with=FALSE],1,which.max)]
]
# Cantidad clase mayoritaria
leaves_target[, y_n:=unlist(apply(leaves_target[,classes,with=FALSE],1,max))]
# Cantidad de elementos de la hoja
leaves_target[, n := unlist(Reduce(function(a,b) Map(`+`,a,b), .SD)), .SDcols=classes]
# Perdida
leaves_target[, loss := n - y_n]
# Return
leaves_target
}
resultados <- ftabla_reglas(modelo, noviembre)
resultados
# View(resultados) # No siempre visualiza las reglas por ser un string largo.
View(resultados)
resultados[, ganancia:= `BAJA+2`*29250 - 750*(CONTINUA + `BAJA+1`)]
resultados
resultados[y == "BAJA+2", .(ganancia=sum(ganancia), enviados=sum(n), sevan=sum(`BAJA+2`))]
resultados[ganancia > 0, .(ganancia=sum(ganancia), enviados=sum(n), sevan=sum(`BAJA+2`))]
noviembre[, clase_binaria := ifelse(clase_ternaria == "BAJA+2", "evento", "noevento")]
# Sacamos la clase ternaria
noviembre[, clase_ternaria:= NULL]
modelo2   <-  rpart( clase_binaria ~ .,   data = noviembre, xval=0 )
modelo2
modelo2   <-  rpart( clase_binaria ~ .,   data = noviembre,   cp=0.001,  xval=0 )
modelo2
resultados2 <- ftabla_reglas(modelo2, noviembre, "clase_binaria")
resultados2
resultados2[, ganancia:= evento*29250 - 750*noevento]
resultados2[y == "evento", .(ganancia=sum(ganancia), enviados=sum(n), sevan=sum(evento))]
resultados2[ganancia > 0, .(ganancia=sum(ganancia), enviados=sum(n), sevan=sum(evento))]
resultados2[, c("p_evento","p_noevento"):= list(evento/n, noevento/n) ]
resultados2
library(ggplot2)
ggplot(resultados2, aes(x=p_evento)) +
geom_density(aes(weights=y_n))
ggplot(resultados2, aes(x=p_evento)) +
facet_grid(vars(y), scales = "free_y") +
geom_density(aes(weights=y_n))
resultados3 <- resultados2[order(-p_evento),]
resultados3 <- resultados3[,.(evento=sum(evento),
noevento=sum(noevento),
n=sum(n),
ganancia=sum(ganancia)),by=p_evento]
resultados3
resultados3 <- resultados3[,.(evento=sum(evento),
noevento=sum(noevento),
n=sum(n),
ganancia=sum(ganancia)),by=p_evento]
resultados3
resultados3 <- resultados2[order(-p_evento),]
resultados3 <- resultados3[,.(evento=sum(evento),
noevento=sum(noevento),
n=sum(n),
ganancia=sum(ganancia)),by=p_evento]
resultados3
resultados3[, gan_acum:=cumsum(ganancia)]
resultados3
ggplot(resultados3, aes(x=p_evento ,y=gan_acum)) +
scale_x_reverse() +
geom_line(size=1)
max_ganancia <- max(resultados3$gan_acum)
max_ganancia
max_punto_corte <- resultados3[gan_acum == max_ganancia, p_evento ]
max_punto_corte
ggplot(resultados3, aes(x=p_evento,y=gan_acum)) +
scale_x_reverse() +
geom_line(size=1) +
xlim(c(0.00000005,0.2)) +
ylim(c(0,8000000)) +
geom_vline(xintercept = max_punto_corte)
# annotate("text",x=0.01,y=100000, label = c(l))
resultados3[p_evento >= 0.025, max(gan_acum) ]
resultados3[, c("evento_acum","noevento_acum"):=list(cumsum(evento),cumsum(noevento))]
total_evento <- resultados3[,sum(evento)]
total_noevento <- resultados3[,sum(noevento)]
resultados3[, c("evento_restantes","noevento_restantes"):=list(total_evento - evento_acum,total_noevento - noevento_acum )]
resultados3[,tp:=evento_acum]
resultados3[,tn:=noevento_restantes]
resultados3[,fp:=noevento_acum]
resultados3[,fn:=evento_restantes]
resultados3
resultados3[,tpr:=(tp/(tp+fn))]
resultados3[,fpr:=(fp/(fp+tn))]
ggplot(resultados3, aes(x=fpr,y=tpr)) +
geom_abline(intercept=0,slope=1) +
geom_line(lwd=1)
# install.packages("geometry")
library(geometry)
install.packages("geometry")
# install.packages("geometry")
library(geometry)
x <- c(resultados3$fpr,1)
y <- c(resultados3$tpr, 0)
polyarea(x, y)
resultados3[, acc:= ((tp + tn)/(tp+tn+fp+fn))]
ggplot(resultados3, aes(x=p_evento,y=acc)) +
geom_line(lwd=1) +
geom_vline(xintercept = 0.025, linetype="dotted")
