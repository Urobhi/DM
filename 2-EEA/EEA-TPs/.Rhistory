max_metric = max(metric_data[,'estimate'],na.rm=TRUE)
cutoff <- max(metric_data[metric_data$estimate==max_metric,'cutoff'],na.rm = TRUE)
print(cutoff)
# Armamos la tabla de confusión y la devolvemos
table <- df %>%
mutate(
predicted_class=if_else(.fitted>cutoff, 1, 0) %>% as.factor(),Survived= factor(Survived)
)
confmatrix = confusionMatrix(data = table$predicted_class,reference = table$Survived, positive = "1")
return(confmatrix)
}
# Mapeamos la matriz de confusión, usamos las métricas de validación para determinar el cutoff
models <- models %>%
mutate(
confmatrix_train = map2(matrix_val_data,pred_train,calculate_confmatrix,metric = 'f1'),
confmatrix_val = map2(matrix_val_data,pred_val,calculate_confmatrix,metric = 'f1'),
confmatrix_test = map2(matrix_val_data,pred_test,calculate_confmatrix,metric = 'f1')
)
# Mostramos las matrices
models$confmatrix_val$total_model
models$confmatrix_test$total_model
# Buscamos el cutoff que maximiza la métrica ( OJO: Solo para métricas en las que los máximos no estan en los bordes)
calculate_confmatrix <- function(confmatrix_metrics_plot,df,metric){
# Buscamos el cutoff óptimo
confmatrix_metrics = confmatrix_metrics_plot$data
metric_data = confmatrix_metrics[confmatrix_metrics$term==metric,]
max_metric = max(metric_data[,'estimate'],na.rm=TRUE)
cutoff <- max(metric_data[metric_data$estimate==max_metric,'cutoff'],na.rm = TRUE)
print(cutoff)
# Armamos la tabla de confusión y la devolvemos
table <- df %>%
mutate(
predicted_class=if_else(.fitted>cutoff, 1, 0) %>% as.factor(),Survived= factor(Survived)
)
confmatrix = confusionMatrix(data = table$predicted_class,reference = table$Survived, positive = "1")
return(confmatrix)
}
# Mapeamos la matriz de confusión, usamos las métricas de validación para determinar el cutoff
models <- models %>%
mutate(
confmatrix_train = map2(matrix_val_data,pred_train,calculate_confmatrix,metric = 'f1'),
confmatrix_val = map2(matrix_val_data,pred_val,calculate_confmatrix,metric = 'f1'),
confmatrix_test = map2(matrix_val_data,pred_test,calculate_confmatrix,metric = 'f1')
)
# Mostramos las matrices
models$confmatrix_val$newvariable_model
models$confmatrix_test$newvariable_model
models <- models %>%
mutate(
confmatrix_train = map2(matrix_val_data,pred_train,calculate_confmatrix,metric = 'accuracy'),
confmatrix_val = map2(matrix_val_data,pred_val,calculate_confmatrix),metric = 'accuracy',
confmatrix_test = map2(matrix_val_data,pred_test,calculate_confmatrix,metric = 'accuracy')
)
models <- models %>%
mutate(
confmatrix_train = map2(matrix_val_data,pred_train,calculate_confmatrix,metric = 'accuracy'),
confmatrix_val = map2(matrix_val_data,pred_val,calculate_confmatrix,metric = 'accuracy'),
confmatrix_test = map2(matrix_val_data,pred_test,calculate_confmatrix,metric = 'accuracy')
)
# Mostramos las matrices
models$confmatrix_val$newvariable_model
models$confmatrix_test$newvariable_model
# Buscamos el cutoff que maximiza la métrica ( OJO: Solo para métricas en las que los máximos no estan en los bordes)
calculate_confmatrix <- function(confmatrix_metrics_plot,df,metric){
# Buscamos el cutoff óptimo
confmatrix_metrics = confmatrix_metrics_plot$data
metric_data = confmatrix_metrics[confmatrix_metrics$term==metric,]
max_metric = max(metric_data[,'estimate'],na.rm=TRUE)
cutoff <- max(metric_data[metric_data$estimate==max_metric,'cutoff'],na.rm = TRUE)
# Armamos la tabla de confusión y la devolvemos
table <- df %>%
mutate(
predicted_class=if_else(.fitted>cutoff, 1, 0) %>% as.factor(),Survived= factor(Survived)
)
confmatrix = confusionMatrix(data = table$predicted_class,reference = table$Survived, positive = "1")
return(confmatrix)
}
# Mapeamos la matriz de confusión, usamos las métricas de validación para determinar el cutoff
models <- models %>%
mutate(
confmatrix_train = map2(matrix_val_data,pred_train,calculate_confmatrix,metric = 'f1'),
confmatrix_val = map2(matrix_val_data,pred_val,calculate_confmatrix,metric = 'f1'),
confmatrix_test = map2(matrix_val_data,pred_test,calculate_confmatrix,metric = 'f1')
)
# Mostramos las matrices
models$confmatrix_val$newvariable_model
models$confmatrix_test$newvariable_model
# Buscamos el cutoff que maximiza la métrica ( OJO: Solo para métricas en las que los máximos no estan en los bordes)
calculate_confmatrix <- function(confmatrix_metrics_plot,df,metric){
# Buscamos el cutoff óptimo
confmatrix_metrics = confmatrix_metrics_plot$data
metric_data = confmatrix_metrics[confmatrix_metrics$term==metric,]
max_metric = max(metric_data[,'estimate'],na.rm=TRUE)
cutoff <- max(metric_data[metric_data$estimate==max_metric,'cutoff'],na.rm = TRUE)
# Armamos la tabla de confusión y la devolvemos
table <- df %>%
mutate(
predicted_class=if_else(.fitted>cutoff, 1, 0) %>% as.factor(),Survived= factor(Survived)
)
confmatrix = confusionMatrix(data = table$predicted_class,reference = table$Survived, positive = "1")
return(confmatrix)
}
# Mapeamos la matriz de confusión, usamos las métricas de validación para determinar el cutoff
models <- models %>%
mutate(
confmatrix_train = map2(matrix_val_data,pred_train,calculate_confmatrix,metric = 'f1'),
confmatrix_val = map2(matrix_val_data,pred_val,calculate_confmatrix,metric = 'f1'),
confmatrix_test = map2(matrix_val_data,pred_test,calculate_confmatrix,metric = 'f1')
)
# Mostramos las matrices
models$confmatrix_val$newvariable_model
# Mostramos las matrices
models$confmatrix_val$newvariable_model
models$confmatrix_val$newvariable_model$positive
# Mostramos las matrices
models$confmatrix_val$newvariable_model
models$confmatrix_val$newvariable_model$overall
# Mostramos las matrices
models$confmatrix_val$newvariable_model
models$confmatrix_val$newvariable_model$byClass
models$confmatrix_val$newvariable_model$term
# Mostramos las matrices
models$confmatrix_val$newvariable_model
# Buscamos el cutoff que maximiza la métrica ( OJO: Solo para métricas en las que los máximos no estan en los bordes)
calculate_confmatrix <- function(confmatrix_metrics_plot,df,metric){
# Buscamos el cutoff óptimo
confmatrix_metrics = confmatrix_metrics_plot$data
metric_data = confmatrix_metrics[confmatrix_metrics$term==metric,]
max_metric = max(metric_data[,'estimate'],na.rm=TRUE)
print(paste('Máximo: ',max_metric))
cutoff <- max(metric_data[metric_data$estimate==max_metric,'cutoff'],na.rm = TRUE)
# Armamos la tabla de confusión y la devolvemos
table <- df %>%
mutate(
predicted_class=if_else(.fitted>cutoff, 1, 0) %>% as.factor(),Survived= factor(Survived)
)
confmatrix = confusionMatrix(data = table$predicted_class,reference = table$Survived, positive = "1")
return(confmatrix)
}
# Mapeamos la matriz de confusión, usamos las métricas de validación para determinar el cutoff
models <- models %>%
mutate(
confmatrix_train = map2(matrix_val_data,pred_train,calculate_confmatrix,metric = 'f1'),
confmatrix_val = map2(matrix_val_data,pred_val,calculate_confmatrix,metric = 'f1'),
confmatrix_test = map2(matrix_val_data,pred_test,calculate_confmatrix,metric = 'f1')
)
# Buscamos el cutoff que maximiza la métrica ( OJO: Solo para métricas en las que los máximos no estan en los bordes)
calculate_confmatrix <- function(confmatrix_metrics_plot,df,metric){
# Buscamos el cutoff óptimo
confmatrix_metrics = confmatrix_metrics_plot$data
metric_data = confmatrix_metrics[confmatrix_metrics$term==metric,]
max_metric = max(metric_data[,'estimate'],na.rm=TRUE)
cutoff <- max(metric_data[metric_data$estimate==max_metric,'cutoff'],na.rm = TRUE)
# Armamos la tabla de confusión y la devolvemos
table <- df %>%
mutate(
predicted_class=if_else(.fitted>cutoff, 1, 0) %>% as.factor(),Survived= factor(Survived)
)
confmatrix = confusionMatrix(data = table$predicted_class,reference = table$Survived, positive = "1")
return(confmatrix)
}
# Mapeamos la matriz de confusión, usamos las métricas de validación para determinar el cutoff
models <- models %>%
mutate(
confmatrix_train = map2(matrix_val_data,pred_train,calculate_confmatrix,metric = 'f1'),
confmatrix_val = map2(matrix_val_data,pred_val,calculate_confmatrix,metric = 'f1'),
confmatrix_test = map2(matrix_val_data,pred_test,calculate_confmatrix,metric = 'f1')
)
# Mostramos las matrices
models$confmatrix_val$newvariable_model
models$confmatrix_test$newvariable_model
models$confmatrix_test$newvariable_model
models <- models %>%
mutate(
confmatrix_train = map2(matrix_val_data,pred_train,calculate_confmatrix,metric = 'accuracy'),
confmatrix_val = map2(matrix_val_data,pred_val,calculate_confmatrix,metric = 'accuracy'),
confmatrix_test = map2(matrix_val_data,pred_test,calculate_confmatrix,metric = 'accuracy')
)
# Mostramos las matrices
models$confmatrix_val$newvariable_model
models$confmatrix_test$newvariable_model
Titanic_test.isna()
unique (unlist (lapply (Titanic_train, function (x) which (is.na (x)))))
unique (unlist (lapply (Titanic_train, function (x) is.na (x))))
library(rmarkdown)
library(purrr)
library(tidyverse)
library(GGally)
library(corrr)
library(tidymodels)
library(ggplot2)
library(ggpubr)
library(gridExtra)
library(caret)
library(modelr)
library(tidyverse)
library(tidymodels)
library(modelr)
library(ISLR)
library(GGally)
library(pROC)
library(cowplot)
library(OneR)
library(rlang)
library(caret)
library(MASS)
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
Parent_folder <- dirname(rstudioapi::getSourceEditorContext()$path)
Titanic_train = read.csv(file = paste0(Parent_folder,"/Datasets/titanic_complete_train.csv",sep=""),dec = ",")
Titanic_test = read.csv(file = paste0(Parent_folder,"/Datasets/titanic_complete_test.csv",sep=""),dec = ",")
# Estrutura
print("Dataset de entrenamiento")
Titanic_train %>% str(give.length = FALSE, give.atrr=FALSE,no.list = TRUE,vec.len = 1)
print("Dataset de Testing")
Titanic_test %>% str(give.length = FALSE, give.atrr=FALSE,no.list = TRUE,vec.len = 1)
preprocessing <- function(Titanic_df){
# Seleccionamos variables
Titanic_df <- Titanic_df %>% dplyr::select(-c('Name','Ticket','Cabin'))
# Transformamos variables a factor
var_tofactor  <- c('Survived','Pclass','Embarked')
Titanic_df <- Titanic_df %>% across(funs(as.factor),var_tofactor)
# Transformamos variables a num
var_toint <- c('Age','Fare')
Titanic_df <- Titanic_df %>% across(funs(as.numeric),var_toint)
# Proporción de target
Survived_table = prop.table(table(as.numeric.factor(Titanic_df$Survived)))
print('Proporción de las variable objetivo: \n')
print(Survived_table)
# Creamos una variable que define si una persona viajó sola
Titanic_df <- Titanic_df %>%
mutate( viaja_solo = as.factor(if_else((SibSp+Parch)>0,0,1)))
return(Titanic_df)
}
print('Dataset de entrenamiento')
Titanic_train <- preprocessing(Titanic_train)
preprocessing <- function(Titanic_df){
# Seleccionamos variables
Titanic_df <- Titanic_df %>% dplyr::select(-c('Name','Ticket','Cabin'))
# Transformamos variables a factor
var_tofactor  <- c('Survived','Pclass','Embarked')
Titanic_df <- Titanic_df %>% mutate_each(funs(as.factor),var_tofactor)
# Transformamos variables a num
var_toint <- c('Age','Fare')
Titanic_df <- Titanic_df %>% mutate_each(funs(as.numeric),var_toint)
# Proporción de target
Survived_table = prop.table(table(as.numeric.factor(Titanic_df$Survived)))
print('Proporción de las variable objetivo: \n')
print(Survived_table)
# Creamos una variable que define si una persona viajó sola
Titanic_df <- Titanic_df %>%
mutate( viaja_solo = as.factor(if_else((SibSp+Parch)>0,0,1)))
return(Titanic_df)
}
print('Dataset de entrenamiento')
Titanic_train <- preprocessing(Titanic_train)
print('Dataset de testing')
Titanic_test <- preprocessing(Titanic_test)
preprocessing <- function(Titanic_df){
# Seleccionamos variables
Titanic_df <- Titanic_df %>% dplyr::select(-c('Name','Ticket','Cabin'))
# Transformamos variables a factor
var_tofactor  <- c('Survived','Pclass','Embarked')
Titanic_df <- Titanic_df %>% mutate_each(funs(as.factor),var_tofactor)
# Transformamos variables a num
var_toint <- c('Age','Fare')
Titanic_df <- Titanic_df %>% mutate_each(funs(as.numeric),var_toint)
# Proporción de target
Survived_table = prop.table(table(as.numeric.factor(Titanic_df$Survived)))
print('Proporción de las variable objetivo:')
print(Survived_table)
# Creamos una variable que define si una persona viajó sola
Titanic_df <- Titanic_df %>%
mutate( viaja_solo = as.factor(if_else((SibSp+Parch)>0,0,1)))
return(Titanic_df)
}
print('Dataset de entrenamiento')
Titanic_train <- preprocessing(Titanic_train)
Parent_folder <- dirname(rstudioapi::getSourceEditorContext()$path)
Titanic_train = read.csv(file = paste0(Parent_folder,"/Datasets/titanic_complete_train.csv",sep=""),dec = ",")
Titanic_test = read.csv(file = paste0(Parent_folder,"/Datasets/titanic_complete_test.csv",sep=""),dec = ",")
# Estrutura
print("Dataset de entrenamiento")
Titanic_train %>% str(give.length = FALSE, give.atrr=FALSE,no.list = TRUE,vec.len = 1)
print("Dataset de Testing")
Titanic_test %>% str(give.length = FALSE, give.atrr=FALSE,no.list = TRUE,vec.len = 1)
preprocessing <- function(Titanic_df){
# Seleccionamos variables
Titanic_df <- Titanic_df %>% dplyr::select(-c('Name','Ticket','Cabin'))
# Transformamos variables a factor
var_tofactor  <- c('Survived','Pclass','Embarked')
Titanic_df <- Titanic_df %>% mutate_each(funs(as.factor),var_tofactor)
# Transformamos variables a num
var_toint <- c('Age','Fare')
Titanic_df <- Titanic_df %>% mutate_each(funs(as.numeric),var_toint)
# Proporción de target
Survived_table = prop.table(table(as.numeric.factor(Titanic_df$Survived)))
print('Proporción de las variable objetivo:')
print(Survived_table)
# Creamos una variable que define si una persona viajó sola
Titanic_df <- Titanic_df %>%
mutate( viaja_solo = as.factor(if_else((SibSp+Parch)>0,0,1)))
return(Titanic_df)
}
print('Dataset de entrenamiento')
Titanic_train <- preprocessing(Titanic_train)
print('Dataset de testing')
Titanic_test <- preprocessing(Titanic_test)
Titanic_train %>% dplyr::select(c('Survived','Pclass','Sex','Age','Fare')) %>%  ggpairs(progress = FALSE,
mapping = aes(colour=Survived),
legend  = 1)
Titanic_test %>% dplyr::select(c('Survived','Pclass','Sex','Age','Fare')) %>%  ggpairs(progress = FALSE,
mapping = aes(colour=Survived),
legend  = 1)
roc_calculation <- function(df)
{
roc_data <- roc(response= df$Survived, predictor = df$.fitted)
}
# Calculamos curvas ROC
models <- models %>%
mutate(
roc_data = (map(pred_val,roc_calculation))
)
library(rmarkdown)
library(purrr)
library(tidyverse)
library(GGally)
library(corrr)
library(tidymodels)
library(ggplot2)
library(ggpubr)
library(gridExtra)
library(caret)
library(modelr)
library(tidyverse)
library(tidymodels)
library(modelr)
library(ISLR)
library(GGally)
library(pROC)
library(cowplot)
library(OneR)
library(rlang)
library(caret)
library(MASS)
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
Parent_folder <- dirname(rstudioapi::getSourceEditorContext()$path)
Titanic_train = read.csv(file = paste0(Parent_folder,"/Datasets/titanic_complete_train.csv",sep=""),dec = ",")
Titanic_test = read.csv(file = paste0(Parent_folder,"/Datasets/titanic_complete_test.csv",sep=""),dec = ",")
# Estrutura
print("Dataset de entrenamiento")
Titanic_train %>% str(give.length = FALSE, give.atrr=FALSE,no.list = TRUE,vec.len = 1)
print("Dataset de Testing")
Titanic_test %>% str(give.length = FALSE, give.atrr=FALSE,no.list = TRUE,vec.len = 1)
preprocessing <- function(Titanic_df){
# Seleccionamos variables
Titanic_df <- Titanic_df %>% dplyr::select(-c('Name','Ticket','Cabin'))
# Transformamos variables a factor
var_tofactor  <- c('Survived','Pclass','Embarked')
Titanic_df <- Titanic_df %>% mutate_each(funs(as.factor),var_tofactor)
# Transformamos variables a num
var_toint <- c('Age','Fare')
Titanic_df <- Titanic_df %>% mutate_each(funs(as.numeric),var_toint)
# Proporción de target
Survived_table = prop.table(table(as.numeric.factor(Titanic_df$Survived)))
print('Proporción de las variable objetivo:')
print(Survived_table)
# Creamos una variable que define si una persona viajó sola
Titanic_df <- Titanic_df %>%
mutate( viaja_solo = as.factor(if_else((SibSp+Parch)>0,0,1)))
return(Titanic_df)
}
print('Dataset de entrenamiento')
Titanic_train <- preprocessing(Titanic_train)
print('Dataset de testing')
Titanic_test <- preprocessing(Titanic_test)
Titanic_train %>%
dplyr::select(c('Survived','Pclass','Sex','Age','Fare')) %>%
ggpairs(progress = FALSE,
mapping = aes(colour=Survived),
legend  = 1)
Titanic_test %>% dplyr::select(c('Survived','Pclass','Sex','Age','Fare')) %>%  ggpairs(progress = FALSE,
mapping = aes(colour=Survived),
legend  = 1)
# Split pero estratificado para preservar la proporción de la clase
set.seed(7)
train_mask <- createDataPartition(Titanic_train$Survived, p=0.7, list=FALSE)
Titanic_train_train<- Titanic_train[train_mask,]
Titanic_train_validation<- Titanic_train[-train_mask,]
print('Proporción de las variables train: ')
print(prop.table(table(Titanic_train$Survived)))
print('Proporción de las variables validación:')
print(prop.table(table(Titanic_train$Survived)))
# Definición de fórmulas y creación de modelos, luego vemos uno por uno
logit_formulas <- formulas(
.response = ~Survived,
baseline_model = ~ Pclass+Sex+Age,
onevariable_model = ~Pclass,
total_model = ~. -PassengerId,
newvariable_model = ~ Pclass + Sex + Age  + SibSp + viaja_solo,
)
models <- tibble(logit_formulas) %>%
mutate(
models = names(logit_formulas),
expression = paste(logit_formulas),
mod = map(logit_formulas, ~glm(., family = 'binomial', data = Titanic_train_train))
)
# Añadimos las predicciones en datos de entrenamiento, validación y test
models <- models %>%
mutate(
pred_train= map(mod,augment, type.predict = "response"),
pred_val = map(mod,augment,newdata=Titanic_train_validation,type.predict = "response"),
pred_test = map(mod,augment,newdata=Titanic_test,type.predict = "response")
)
# Abrimos un summary del modelo propuesto por el enunciado
models %>%
filter(models == "baseline_model") %>%
mutate(tidy = map(mod, tidy))  %>%
unnest(tidy)%>%
mutate(estimate=round(estimate,5),
p.value=round(p.value,4))
models %>%
filter (models == "baseline_model") %>%
unnest(pred_train) %>%
filter((Sex == 'female' & Age ==17 & Pclass == 1) | (Sex =='male' & Age==20 & Pclass ==3) ) %>%
dplyr::select(c('Sex','Age','Pclass','.fitted','Survived'))
# Calcular las medidas de evaluación para cada modelo
models <- models %>%
mutate(glance = map(mod,glance))
# Obtener las medidas de evaluacion de interes
models %>%
unnest(glance) %>%
mutate(perc_explained_dev = 1-deviance/null.deviance) %>%
arrange(deviance) %>%
dplyr::select(c('models','null.deviance','deviance'))
graph_violin <- function(df,name)
{
violin = ggplot(df, aes(x=Survived, y=.fitted, group=Survived, fill=factor(Survived))) +
geom_violin() +
theme_bw() +
guides(fill=FALSE) +
labs(title='Violin plot', subtitle= name , y='predicted probability')
return(violin)
# mostramos ambos
}
models <- models %>%
mutate( violin = map2(pred_val,models,graph_violin))
ggarrange( plotlist = models$violin, nrow=2,ncol = 2)
roc_calculation <- function(df)
{
roc_data <- roc(response= df$Survived, predictor = df$.fitted)
}
# Calculamos curvas ROC
models <- models %>%
mutate(
roc_data = (map(pred_val,roc_calculation))
)
ggroc(models$roc_data, size=1) +
geom_abline(slope = 1, intercept = 1, linetype='dashed') +
theme_bw() +
labs(title='Curvas ROC', color='Modelo')
print(paste("AUC Baseline model",models$roc_data$baseline_model$auc))
print(paste("AUC onevariable model",models$roc_data$onevariable_model$auc))
print(paste("AUC total model",models$roc_data$total_model$auc))
print(paste("AUC newvariable model",models$roc_data$newvariable_model$auc))
prediction_metrics <- function(cutoff, df)
{
table <- df %>%
mutate(predicted_class=if_else(.fitted>cutoff, 1, 0) %>% as.factor(),
Survived= factor(Survived))
confusionMatrix(data = table$predicted_class,reference = table$Survived, positive = "1") %>%
tidy() %>%
dplyr::select(term, estimate) %>%
filter(term %in% c('accuracy', 'sensitivity', 'specificity', 'precision','f1')) %>%
mutate(cutoff=cutoff)
}
plot_confmatrix_data  <- function (df,name)
{
cutoffs = seq(0.01,1,0.01)
logit_pred_val= map_dfr(cutoffs, function(x){prediction_metrics(cutoff = x,df = df)})%>% mutate(term=as.factor(term))
ggplot(logit_pred_val, aes(cutoff,estimate, group=term, color=term)) + geom_line(size=1) +
theme_bw() +
labs(title= 'Métricas del modelo', subtitle= name, color="")
}
models <- models %>%
mutate(
matrix_val_data = map2(pred_val,models,plot_confmatrix_data)
)
ggarrange( plotlist = models$matrix_val_data, nrow=2,ncol = 2)
prediction_metrics <- function(cutoff, df)
{
table <- df %>%
mutate(predicted_class=if_else(.fitted>cutoff, 1, 0) %>% as.factor(),
Survived= factor(Survived))
confusionMatrix(data = table$predicted_class,reference = table$Survived, positive = "1") %>%
tidy() %>%
dplyr::select(term, estimate) %>%
filter(term %in% c('accuracy', 'sensitivity', 'specificity', 'precision','f1')) %>%
mutate(cutoff=cutoff)
}
plot_confmatrix_data  <- function (df,name)
{
cutoffs = seq(0.01,1,0.01)
logit_pred_val= map_dfr(cutoffs, function(x){prediction_metrics(cutoff = x,df = df)})%>% mutate(term=as.factor(term))
ggplot(logit_pred_val, aes(cutoff,estimate, group=term, color=term)) + geom_line(size=1) +
theme_bw() +
labs(title= 'Métricas del modelo', subtitle= name, color="")
}
models <- models %>%
mutate(
matrix_val_data = map2(pred_val,models,plot_confmatrix_data)
)
ggarrange( plotlist = models$matrix_val_data, nrow=2,ncol = 2)
