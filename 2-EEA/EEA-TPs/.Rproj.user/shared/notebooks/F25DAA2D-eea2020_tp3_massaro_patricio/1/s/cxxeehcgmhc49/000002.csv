"0",""
"0","# Buscamos el cutoff que maximiza la métrica ( OJO: Solo para métricas en las que los máximos no estan en los bordes)"
"0",""
"0","calculate_confmatrix <- function(confmatrix_metrics_plot,df,metric){"
"0","  # Buscamos el cutoff óptimo"
"0","  "
"0","  confmatrix_metrics = confmatrix_metrics_plot$data"
"0","  metric_data = confmatrix_metrics[confmatrix_metrics$term==metric,]"
"0","  max_metric = max(metric_data[,'estimate'],na.rm=TRUE)"
"0","  cutoff <- max(metric_data[metric_data$estimate==max_metric,'cutoff'],na.rm = TRUE)"
"0","  # Armamos la tabla de confusión y la devolvemos"
"0","  table <- df %>%"
"0","  mutate("
"0","    predicted_class=if_else(.fitted>cutoff, 1, 0) %>% as.factor(),Survived= factor(Survived)"
"0","    )"
"0",""
"0","  confmatrix = confusionMatrix(data = table$predicted_class,reference = table$Survived, positive = ""1"")"
"0",""
"0","  return(confmatrix)"
"0","  }"
"0",""
"0",""
"0","# Mapeamos la matriz de confusión, usamos las métricas de validación para determinar el cutoff"
"0","models <- models %>% "
"0","            mutate("
"0","              confmatrix_train = map2(matrix_val_data,pred_train,calculate_confmatrix,metric = 'f1'),"
"0","              confmatrix_val = map2(matrix_val_data,pred_val,calculate_confmatrix,metric = 'f1'),"
"0","              confmatrix_test = map2(matrix_val_data,pred_test,calculate_confmatrix,metric = 'f1')"
"0","              )"
"0",""
"0",""
